
let modelData = {
    "letters": " abcdefghilmnopqrstuvx",
    "letters_embedding": [
        [0, 112, 0],
        [219, 46, 17],
        [123, 13, 49],
        [88, 14, 49],
        [182, 8, 42],
        [255, 40, 0],
        [0, 24, 51],
        [26, 145, 115],
        [151, 18, 47],
        [203, 40, 21],
        [159, 45, 61],
        [140, 4, 39],
        [196, 14, 37],
        [222, 51, 13],
        [9, 42, 64],
        [208, 255, 255],
        [173, 8, 39],
        [161, 9, 29],
        [118, 0, 48],
        [187, 115, 28],
        [128, 8, 44],
        [108, 7, 44]
    ],
    "group": [
        {
            "type": "linear",
            "weight": [
                [-1, -2, -2, -28, 21, -57, 15, 8, 9, 67, -102, -128],
                [11, -1, 17, -29, 40, -79, 85, 10, 16, -69, -128, 52],
                [0, 0, 2, 6, -2, 16, -23, -12, -28, 3, -2, 127],
                [3, -4, 18, 44, 22, 127, 14, -19, 23, -24, -17, 67],
                [0, 1, 0, 0, -1, -2, 0, 9, -5, 3, -128, 10],
                [-128, -13, -39, 1, -43, 34, -2, -6, 35, -9, 10, 47],
                [0, -1, -3, 15, -1, 13, 9, -43, 127, -28, -102, 100],
                [3, -93, -36, 9, 56, -33, -49, -98, -128, -6, -81, -64],
                [-5, -1, -14, 11, -5, -8, -62, -19, -39, 97, 127, 16],
                [-4, -5, -6, 35, 18, 118, 38, 60, -128, 84, -100, 118],
                [1, -1, 6, 3, 20, 16, -4, 35, -128, -2, -42, 19],
                [16, -40, -68, -11, -24, -128, -13, 4, -70, 6, -50, -66],
                [5, -2, 7, -19, -20, -7, -6, -9, 31, 3, -87, 127],
                [-46, -17, -115, 15, -96, 127, 6, -8, 75, 27, -4, -49],
                [0, -1, 5, 10, -8, 14, -8, -50, 64, 44, -128, 113],
                [-1, -5, 3, -7, 19, -31, 66, 29, 56, -42, -48, 127]
            ],
            "bias": [811, 782, -285, 816, -24, -29, 166, 210, -49, -275, -125, 189, -169, -868, -19, -166]
        },
        {
            "type": "relu"
        },
        {
            "type": "linear",
            "weight": [
                [-9, -19, 35, -16, -128, 18, 26, -2, 7, 4, 66, -2, 33, -13, 12, 18],
                [-1, 2, 3, -4, 127, 1, 15, -1, -6, 5, -3, 0, -1, -2, 10, -1],
                [-120, -4, -74, 15, 127, -11, 41, 2, 4, -10, 8, 3, 24, 12, -31, 11],
                [-57, 8, 76, -33, -82, 86, -24, -2, -29, -22, -128, 6, -79, -2, -13, -27],
                [-16, -6, -81, -6, -80, 127, 23, -2, 24, 10, 36, 3, 16, -31, -4, 1],
                [-8, -128, -15, -1, 2, 12, 5, 0, 3, 1, 5, -1, 9, -3, -32, 0]
            ],
            "bias": [-64214, -9095, 50637, -3099, -12515, -3227]
        },
        {
            "type": "relu"
        }
    ],
    "head": [
        {
            "type": "linear",
            "weight": [
                [0, 0, 0, -3, 0, 1, 0, -1, 0, 2, 0, -5, 9, 44, -2, 3, -7, 127],
                [0, 0, 0, 1, 0, -2, 0, 0, -1, 1, 0, 4, 53, 49, -128, 3, 7, -118],
                [0, 0, 0, -2, 0, -2, 0, 1, -1, 1, 1, 3, -46, 14, -14, 1, 27, -128],
                [0, 1, 2, -10, 1, 1, 0, 4, -4, 9, 2, 3, -40, -3, -37, 12, 110, -128],
                [0, -1, 0, 2, 0, 0, 0, 1, 0, -4, -1, 4, 50, 14, -1, 2, -20, 127],
                [1, 0, 0, 1, 0, -13, -4, 6, -7, 1, 2, 13, -15, 35, -13, -5, 20, 5],
                [0, 0, 0, -2, 0, -1, 0, 0, 1, -1, 0, -4, -4, -128, -18, 3, 18, -122],
                [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, -2, -4, -31, -45, -2, 19, -128],
                [0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, -1, -20, 25, -2, 1, 9, -128],
                [0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 1, -12, 8, -1, -1, 13, -128],
                [0, -1, 0, -2, 0, -3, 0, 0, 1, 1, 0, 0, 62, -72, -6, 4, -11, 73],
                [0, 0, 0, -2, 0, 1, 0, 0, 0, -1, 0, 2, 0, -4, 8, -2, 12, -128],
                [0, 0, 0, -2, 0, -1, 0, 0, 0, -1, 0, 2, -23, 40, -3, -3, 22, -128],
                [0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, 1, -1, -1, -18, 127],
                [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, -1, -28, -14, -16, 1, 18, -128],
                [0, 0, 0, -3, 0, -1, 0, -1, 0, 0, 0, 0, 27, 41, -58, 2, -17, 127]
            ],
            "bias": [563617, -1893353, -1322590, 7072265, -1800887, -8388608, 6176861, 118599, 476747, 2995529, 8323072, 401371, -1831656, 1608281, 99009, -6617803]
        },
        {
            "type": "relu"
        },
        {
            "type": "bit_shift",
            "value": [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
        },
        {
            "type": "linear",
            "weight": [
                [-4, 1, 35, -4, 18, 5, 8, 8, 14, 17, -6, -18, -18, -128, -61, -13],
                [3, -7, -24, -5, -34, -28, -47, 8, -128, -114, 10, 42, 80, -105, -3, 5],
                [-101, -27, -128, 12, -34, -32, -69, 109, 117, -28, 2, -87, -30, -125, -75, 79],
                [-30, 18, -88, 0, -60, -128, -28, -28, -98, 24, -15, -37, -50, -94, 38, -68],
                [-79, 3, -128, 10, 57, -77, 5, -84, -59, 68, -34, -6, -5, 58, -6, -66],
                [-18, -14, -128, 6, 71, -12, -19, -66, -4, -57, -13, 70, -27, -28, 108, 0],
                [-29, -14, -128, -2, -44, -9, -3, 39, -10, -11, -31, 24, 11, -47, -42, -40],
                [-32, 19, -65, -2, -78, -45, -20, 14, -28, -31, 0, -66, -18, -128, 52, -23],
                [-23, -30, -85, -4, 42, -2, -36, 41, -12, 16, -3, -7, -35, -128, 35, 41],
                [35, 4, -45, -6, -59, -19, -15, -41, -103, -128, 7, 52, 42, -117, 70, -28],
                [-5, -4, 34, -4, 27, -35, -22, 45, -128, 68, 1, -73, -16, -93, -32, -29],
                [-53, -12, 28, 2, 18, -3, 3, 18, -4, 12, -12, -37, -24, -5, -128, 35],
                [-64, 19, 74, -6, -89, -39, 30, -19, 121, -128, 2, 8, -66, -91, -109, 2],
                [24, -9, -48, -2, -49, -26, -74, 34, -120, -128, 20, 33, 65, -101, 59, -2],
                [42, -9, 13, -4, -128, -43, -8, -27, 45, 2, 21, 81, -125, 13, -70, 13],
                [-21, 0, 53, -14, -38, 0, 13, 7, -72, 1, -1, 4, 49, -128, -116, 4],
                [-74, -49, -75, -1, 127, -49, 20, 44, -33, -79, -22, -28, 7, -69, 8, 71],
                [46, 23, 32, 2, -93, -29, -2, -74, -103, 44, -28, 35, -116, 87, 3, -128],
                [19, 14, -67, 0, -7, -19, -16, -40, -40, -16, -1, 0, -13, 64, 112, -128],
                [0, -19, -52, -2, 33, -10, -40, 28, -53, 76, 6, 2, -18, -128, -39, 17],
                [-56, 17, -31, -9, -60, -4, -14, 23, -1, -31, -11, -45, -45, -128, -9, 6],
                [-9, 8, -53, -1, -77, -13, -20, -8, -52, -20, 12, -31, 15, -128, 95, 7]
            ],
            "bias": [-235911, 1598575, 377854, 1269153, -1513735, -73985, 423062, 1096118, -131710, 1727218, 370408, 546172, 1940096, 86290, -3865100, 319383, 1143012, -1999705, -1112080, -2207228, 1847415, -455022]
        }
    ],
    "output_scale_u0_31": [5986, 1931, 1635, 1333, 1720, 1734, 2219, 2178, 2561, 1993, 4099, 2710, 1758, 1808, 1525, 3318, 1124, 1404, 2174, 2154, 1916, 4801],
    "output_shift": 22,
    "fractional_bits": 9,
    "prob_fractional_bits": 9,
    "prob_exp_table": [
        [512, 1391, 3783, 10283, 27954, 75987, 206555, 561476],
        [512, 580, 657, 744, 844, 956, 1083, 1228],
        [512, 520, 528, 536, 545, 553, 562, 571],
        [512, 513, 514, 515, 516, 517, 518, 519]
    ]
};

const punctuation = {
    "dot": [0, 0, 2468, 5268, 8469, 12061, 16193, 20215, 23748, 27064, 30313, 33611, 36973, 40109, 42831, 45110, 47089, 48911, 50647, 52231, 53630, 54878, 55969, 56966, 57927, 58783, 59531, 60196, 60804, 61317, 61796, 62235, 62629, 62984, 63296, 63579, 63851, 64087, 64302, 64497, 64663, 64808, 64938, 65065, 65173, 65274, 65369, 65459, 65536],
    "comma": [
        [65536],
        [0, 65536],
        [0, 0, 65536],
        [0, 5450, 10321, 65536],
        [0, 4252, 10257, 14360, 65536],
        [0, 3919, 10195, 15120, 18274, 65536],
        [0, 4174, 10541, 17693, 21899, 24081, 65536],
        [0, 5021, 11799, 19996, 26408, 29717, 31148, 65536],
        [0, 5236, 12817, 21240, 29768, 34589, 36975, 37913, 65536],
        [0, 4651, 11512, 20863, 29860, 36696, 40425, 42228, 42781, 65536],
        [0, 4515, 11440, 20278, 29996, 37971, 42905, 45465, 46561, 46964, 65536],
        [0, 4836, 11619, 19773, 28623, 37507, 43942, 47933, 49640, 50405, 50702, 65536],
        [0, 4499, 11741, 19890, 28298, 36409, 43892, 48720, 51622, 53136, 53896, 54080, 65536],
        [0, 5107, 12324, 21165, 29341, 37059, 43940, 49326, 52953, 54813, 55786, 56251, 56416, 65536],
        [0, 4932, 12158, 20626, 29134, 36997, 43701, 48984, 52773, 55419, 57036, 57975, 58334, 58457, 65536],
        [0, 4973, 12104, 20496, 29062, 37271, 43816, 48999, 52912, 55984, 58114, 59485, 60024, 60243, 60289, 65536],
        [0, 4851, 12015, 19713, 28964, 37341, 44166, 49151, 53108, 56418, 58556, 60098, 60972, 61445, 61630, 61702, 65536],
        [0, 4888, 11490, 19652, 28152, 36205, 43418, 48808, 52834, 55966, 58334, 60058, 61356, 62033, 62371, 62524, 62557, 65536],
        [0, 4610, 10847, 19241, 27450, 35930, 43091, 49131, 52878, 56095, 58634, 60384, 61974, 62787, 63342, 63589, 63638, 63675, 65536],
        [0, 4509, 11177, 18993, 27241, 35070, 42926, 48649, 52604, 55965, 58111, 60203, 61566, 62767, 63550, 64104, 64226, 64267, 64267, 65536],
        [0, 4355, 10933, 18932, 26840, 34582, 41765, 46952, 51110, 54694, 57355, 59865, 61574, 62648, 63555, 64054, 64432, 64568, 64629, 64644, 65536],
        [0, 4539, 11192, 19840, 28041, 35726, 41932, 46969, 51061, 54568, 57456, 59811, 61221, 62321, 63318, 63989, 64677, 65055, 65175, 65209, 65209, 65536],
        [0, 4698, 11534, 18771, 26447, 33761, 40024, 45638, 49954, 54002, 57134, 59349, 61010, 62557, 63416, 64123, 64619, 64925, 65154, 65288, 65326, 65345, 65536],
        [0, 4319, 10585, 18392, 26827, 34695, 41305, 46374, 50389, 53167, 56533, 58905, 60811, 62474, 63305, 63954, 64360, 64826, 65110, 65333, 65475, 65516, 65536, 65536],
        [0, 4194, 10362, 18257, 25748, 33284, 39743, 44924, 49499, 53043, 55847, 58314, 60355, 61880, 63024, 63764, 64190, 64684, 64908, 65132, 65356, 65446, 65536, 65536, 65536],
        [0, 4396, 11950, 19327, 27058, 34208, 40954, 46108, 50251, 53409, 55986, 58260, 60231, 61368, 62656, 63490, 64197, 64702, 64929, 65308, 65359, 65511, 65511, 65536, 65536],
        [0, 4445, 11097, 18592, 26755, 34105, 40845, 45871, 49909, 53569, 55602, 57665, 59495, 61093, 62081, 62952, 63707, 64114, 64753, 64985, 65275, 65420, 65478, 65507, 65536],
        [0, 4699, 10605, 18511, 26703, 34069, 41054, 46706, 50453, 53438, 56232, 58296, 59852, 61376, 62265, 63218, 63631, 64139, 64488, 64806, 64933, 65282, 65441, 65504, 65536],
        [0, 4286, 10286, 17572, 25322, 32179, 39500, 44036, 47857, 51286, 53857, 56286, 58036, 59965, 61108, 62108, 63001, 63715, 64358, 64572, 64679, 65000, 65179, 65429, 65536],
        [0, 4185, 11019, 17584, 26030, 33708, 40311, 45532, 49602, 52789, 55553, 57473, 59316, 61044, 62119, 62925, 63501, 64077, 64614, 65075, 65113, 65267, 65344, 65459, 65536],
        [0, 3982, 9747, 17794, 25302, 32810, 39737, 44922, 48821, 52139, 54794, 57283, 59066, 60393, 61430, 62384, 63255, 63919, 64375, 64707, 64914, 65246, 65453, 65453, 65536],
        [0, 4951, 11703, 19130, 26602, 34074, 40376, 45777, 49648, 52574, 55005, 56850, 59101, 60451, 61576, 62206, 62926, 63646, 64321, 64771, 64951, 65311, 65356, 65401, 65536],
        [0, 4626, 11000, 19224, 26986, 33822, 39013, 44873, 48625, 52377, 55050, 57312, 58957, 60293, 61835, 62606, 63274, 63839, 64302, 64713, 64816, 65022, 65125, 65433, 65536],
        [0, 4483, 11122, 18782, 26782, 33250, 39265, 44145, 48911, 52883, 56061, 57877, 59466, 60601, 61622, 62473, 63040, 64175, 64572, 64799, 64969, 65139, 65423, 65536, 65536],
        [0, 4696, 11672, 19789, 27906, 35151, 41591, 46085, 49707, 52457, 55408, 57689, 58963, 60439, 61713, 62987, 63658, 63993, 64463, 64933, 65134, 65134, 65335, 65402, 65536],
        [0, 4421, 11859, 19858, 27857, 34663, 40557, 45258, 48907, 51714, 54310, 56485, 58660, 59923, 61046, 61818, 62941, 63362, 63783, 64134, 64625, 64835, 65256, 65466, 65536],
        [0, 5023, 11401, 18337, 25513, 34124, 40423, 45286, 49272, 51823, 54534, 57165, 58999, 60035, 61151, 62108, 62905, 63224, 63623, 64261, 64739, 64978, 65137, 65456, 65536],
        [0, 4147, 11140, 18620, 26100, 33093, 39273, 43501, 47648, 51144, 53665, 56755, 58625, 60251, 61145, 62121, 62609, 63097, 63991, 64479, 64885, 65048, 65292, 65536, 65536],
        [0, 5004, 12607, 20787, 27812, 35607, 41477, 46770, 51004, 54468, 56585, 57932, 59183, 61011, 61396, 62166, 62936, 63610, 63899, 64380, 64573, 64766, 65055, 65247, 65536],
        [0, 4557, 11067, 16926, 24413, 31466, 37434, 43402, 47851, 51432, 54145, 55881, 57508, 59895, 60980, 62608, 62825, 63801, 64126, 64560, 64777, 65102, 65102, 65319, 65536],
        [0, 4338, 8910, 18055, 25558, 33061, 39392, 44785, 48888, 52053, 55218, 57680, 58735, 59907, 60610, 62017, 62955, 63776, 64128, 64363, 64715, 65536, 65536, 65536, 65536],
        [0, 4244, 10610, 18974, 27088, 35826, 41943, 45563, 49932, 53302, 55924, 58171, 59419, 60667, 61416, 62040, 63164, 63663, 64287, 64537, 65036, 65286, 65536, 65536, 65536],
        [0, 4952, 13544, 19952, 27962, 33787, 39030, 42380, 47186, 51264, 53157, 55341, 57525, 59273, 60584, 61895, 62623, 63497, 63788, 64371, 64662, 64953, 65099, 65245, 65536],
        [0, 4146, 12119, 20570, 28064, 33326, 40023, 44647, 49431, 51663, 54214, 55649, 58360, 60114, 61071, 62347, 63623, 63623, 64261, 64580, 64739, 64739, 65058, 65377, 65536],
        [0, 4898, 12499, 21958, 27870, 33951, 41214, 46112, 50503, 53543, 55908, 57935, 60131, 60975, 61482, 62157, 62664, 63339, 64015, 64353, 64522, 65029, 65198, 65198, 65536],
        [0, 5716, 13066, 19395, 29195, 35116, 41037, 45937, 49204, 52675, 55125, 56554, 59004, 61046, 62067, 62884, 63496, 63904, 64312, 64516, 64924, 65332, 65332, 65332, 65536],
        [0, 3867, 11398, 20150, 27477, 33990, 39485, 43352, 47830, 50272, 54953, 56988, 57802, 60041, 61873, 62891, 63502, 64316, 64316, 64723, 64723, 64723, 65130, 65333, 65536],
        [0, 5140, 13278, 20988, 27199, 33838, 40263, 46902, 50329, 54184, 56754, 58039, 59110, 61038, 61681, 62966, 63180, 63823, 64680, 64680, 64894, 65108, 65322, 65536, 65536],
        [0, 3411, 8527, 17785, 25337, 32889, 39223, 43608, 47750, 50430, 51404, 56520, 59200, 60418, 60905, 62367, 62854, 63829, 64560, 64804, 65048, 65292, 65292, 65536, 65536]
    ]
};

function prepareModel() {
    modelData.letter_to_index = {};
    for (let i = 0; i < modelData.letters.length; i++) {
        modelData.letter_to_index[modelData.letters[i]] = i;
    }
}

prepareModel();


function strToEmbedding(str) {
    return [
        ...modelData.letters_embedding[modelData.letter_to_index[str[0]]],
        ...modelData.letters_embedding[modelData.letter_to_index[str[1]]],
        ...modelData.letters_embedding[modelData.letter_to_index[str[2]]],
        ...modelData.letters_embedding[modelData.letter_to_index[str[3]]]
    ];
}

function evalModel(layers, input) {
    let value = input.slice();
    for (let layer of layers) {
        switch (layer.type) {

            case 'relu': {
                for (let i = 0; i < value.length; i++) {
                    value[i] = Math.max(0, value[i]);
                }
                break;
            }

            case 'bit_shift': {
                for (let i = 0; i < value.length; i++) {
                    value[i] >>= layer.value[i];
                }
                break;
            }

            case 'linear': {
                let result = new Array(layer.bias.length);
                for (let row = 0; row < result.length; row++) {
                    let sum = layer.bias[row];
                    for (let col = 0; col < value.length; col++) {
                        sum += value[col] * layer.weight[row][col];
                    }
                    result[row] = sum;
                }
                value = result;
                break;
            }
        }
    }
    return value;
}

function exp_fixed(x) {
    if (x < 0) {
        return 0;
    }
    let shift = modelData.fractional_bits;
    let result = modelData.prob_exp_table[0][0];
    for (let i = 0; i < modelData.prob_exp_table.length; i++) {
        let group_value = (x >> shift) & 7;
        result = (result * modelData.prob_exp_table[i][group_value]) >> modelData.prob_fractional_bits;
        shift -= 3
        if (shift < 0) {
            break
        }
    }
    return result >> modelData.prob_fractional_bits;
}

function random_from_cumsum(probs) {
    let maxValue = probs.at(-1);
    let rand = Math.floor(Math.random() * maxValue);
    let start = 0;
    let end = probs.length;
    while (start < end) {
        let mid = (start + end) >> 1;
        if (rand < probs[mid]) {
            end = mid;
        } else {
            start = mid + 1;
        }
    }
    return start
}

const LETTERS_PER_GROUP = 4;
const GROUPS_PER_CONTEXT = 3;
const LETTERS_PER_CONTEXT = LETTERS_PER_GROUP * GROUPS_PER_CONTEXT;
const LETTER_EMBEDDING_SIZE = 3;

class Generator {

    constructor(modelData) {
        this.modelData = modelData;
        let heat = 50;
        this.heat_inv_u11_4 = BigInt(Math.max(2, Math.min(127, Math.floor(1600 / heat))));
        this.limit_logits = BigInt((8 << modelData.fractional_bits) - 1);
        this.letterEmbedding = strToEmbedding(' '.repeat(LETTERS_PER_GROUP));
        let emptyGroupEmb = evalModel(modelData.group, this.letterEmbedding);
        this.groupHistory = new Array(LETTERS_PER_CONTEXT - LETTERS_PER_GROUP).fill(emptyGroupEmb);
        this.contextText = ' '.repeat(2 * LETTERS_PER_CONTEXT);
    }

    generateNextLetter(remaining) {
        let g = [];
        for (let i = 0; i < this.groupHistory.length; i += LETTERS_PER_GROUP) {
            g.push(...this.groupHistory[i]);
        }
        let currentGroup = evalModel(modelData.group, this.letterEmbedding);
        this.groupHistory.shift();
        this.groupHistory.push(currentGroup);
        g.push(...currentGroup);

        let logits_unscaled = evalModel(modelData.head, g);
        let logits_fixed = new Array(logits_unscaled.length);
        let max_logits_fixed = -Infinity;
        for (let i = 0; i < logits_unscaled.length; i++) {
            let logits_no_heat_fixed = (BigInt(logits_unscaled[i]) * BigInt(modelData.output_scale_u0_31[i])) >> BigInt(modelData.output_shift);
            logits_fixed[i] = (logits_no_heat_fixed * this.heat_inv_u11_4) >> 4n;
            if (logits_fixed[i] > max_logits_fixed) {
                max_logits_fixed = logits_fixed[i];
            }
        }
        let prob_cumsum = new Array(logits_fixed.length);
        let cumsum = 0;
        for (let i = 0; i < logits_unscaled.length; i++) {
            let value = logits_fixed[i] - max_logits_fixed + this.limit_logits
            if (value < -2147483648n) {
                value = -2147483648n;
            }
            value = Number(value);
            let exponents_fixed = exp_fixed(value)
            while (i === 0 && exponents_fixed > 0) {
                // Avoid spaces and very short words at the end of the text
                if (remaining < 3) {
                    exponents_fixed = 0;
                    break;
                }
                // Avoid repeating the last word
                let index1 = this.contextText.lastIndexOf(' ');
                if (index1 < 0) break;
                let index2 = this.contextText.substring(0, index1).lastIndexOf(' ');
                if (index2 < 0) break;
                let lastWord = this.contextText.substring(index2 + 1, index1);
                let thisWord = this.contextText.substring(index1 + 1);
                if (lastWord === thisWord) {
                    exponents_fixed = 0;
                }
                break;
            }
            cumsum += exponents_fixed;
            prob_cumsum[i] = cumsum;
        }
        let letterIndex = random_from_cumsum(prob_cumsum);
        if (letterIndex >= modelData.letters.length) {
            letterIndex = 1;
        }
        this.letterEmbedding.splice(0, LETTER_EMBEDDING_SIZE);
        this.letterEmbedding.push(...modelData.letters_embedding[letterIndex]);
        this.contextText = this.contextText.slice(1) + modelData.letters[letterIndex];
        return modelData.letters[letterIndex];
    }
}

MIN_LAST_SENTENCE_LETTERS = 20;

let gen = new Generator(modelData);
let remaining = 20000;
let text = '';
let beginningOfSentence = true;
let nextDot = random_from_cumsum(punctuation.dot);
let nextComma = random_from_cumsum(punctuation.comma[nextDot]);
remaining--;
while (remaining > 0) {
    remaining--;
    let letter = gen.generateNextLetter(remaining);
    if (beginningOfSentence) {
        letter = letter.toUpperCase();
        beginningOfSentence = false;
    }
    if (letter === ' ') {
        nextDot--;
        nextComma--;
        if (nextDot === 0 && remaining > MIN_LAST_SENTENCE_LETTERS) {
            nextDot = random_from_cumsum(punctuation.dot);
            nextComma = random_from_cumsum(punctuation.comma[nextDot]);
            beginningOfSentence = true;
            text += '. ';
            remaining--;
        } else if (nextComma === 0 && remaining > MIN_LAST_SENTENCE_LETTERS) {
            nextComma = random_from_cumsum(punctuation.comma[nextDot]);
            text += ', ';
            remaining--;
        } else {
            text += ' ';
        }
    } else {
        text += letter;
    }
}
text += '.';

console.log(text);
